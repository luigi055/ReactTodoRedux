import firebase, { firebaseRef, githubProvider } from 'app/firebase'; 
import moment from 'moment';

export const setSearchText = searchText => {
  return {
    type: 'SET_SEARCH_TEXT',
    searchText
  };
};

export const addTodo = todo => {
  return {
    type: 'ADD_TODO',
    todo
  };
};

export const addTodos = todos => {
  return {
    type: 'ADD_TODOS',
    todos
  };
};

export const startAddTodos = () => {
  return (dispatch, getState) => {
    const todosRef = firebaseRef.child('todos');

    return todosRef.once('value').then(snapshot => {
      const todos = snapshot.val() || {};
      const parsedTodos = [];

      Object.keys(todos).forEach(todoId => {
        parsedTodos.push({
          id: todoId,
          ...todos[todoId]
        });
      });
      dispatch(addTodos(parsedTodos));
    });
  };
};

export const updateTodo = (id, updates) => {
  return {
    type: 'UPDATE_TODO',
    id,
    updates
  };
};

export const toggleShowCompleted = () => {
  return {
    type: 'TOGGLE_SHOW_COMPLETED',
  };
};

// working with async actions
// since asynchronous functions are no pure we got to use
// redux-thunk middleware for the purpose of maintain our functions pure
// redux-thunk instead of create actions creators that returns objects
// it returns functions

export const startAddTodo = text => {
  return (dispatch, getState) => {
    const todo = {
      // id: uuid(), we won't need the id since it will be generated by firebase
      text,
      completed: false,
      createdAt: moment().unix(),
      completedAt: null
    };
    const todoRef = firebaseRef.child('todos').push(todo); 

    return todoRef.then(() => {
      dispatch(addTodo({
        ...todo,
        id: todoRef.key,
      }));
    });
  }
}

export const startToggleTodo = (id, completed) => {
  return (dispatch, getState) => {
    const todoRef = firebaseRef.child(`todos/${id}`);
    const updates = {
      completed,
      completedAt: completed ? moment().unix() : null 
    };
    return todoRef.update(updates).then(() => {
      dispatch(updateTodo(id, updates))
    });
  };
};

export const login = uid => {
  return {
    type: 'LOGIN',
    uid
  };
};

export const startLogin = () => {
  return (dispatch, getState) => {
    return firebase.auth().signInWithPopup(githubProvider).then((result) => {
      console.log('Auth Worked', result);
    }, e => {
      console.log('Unable to auth', e);
    });
  };
};

export const logout = () => {
  return {
    type: 'LOGOUT'
  };
};

export const startLogout = () => {
  return (dispatch, getState) => {
    return firebase.auth().signOut().then(() => {
      console.log('Logged Out');
    });
  };
};

